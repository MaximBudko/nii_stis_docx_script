require 'rubyXL'
require 'zip'
require 'nokogiri'
require 'fileutils'

# –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
UNIT_MAP = {
  'n' => '–Ω–§',
  'u' => '–º–∫–§',
  'm' => '–ú–û–º',
  'k' => '–∫–û–º',
  'p' => '–ø–§'
}

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
CATEGORY_MAP = {
  'C' => '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã',
  'R' => '–†–µ–∑–∏—Å—Ç–æ—Ä—ã',
  'L' => '–ö–∞—Ç—É—à–∫–∏ –∏–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
  'D' => '–î–∏–æ–¥—ã',
  'Q' => '–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã',
  'U' => '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã'
}

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
docx_path = "shablon_pr.docx"
new_docx_path = "shablon_pr_updated.docx"
xlsx_path = "Test.xlsx"

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
def parse_characteristics(value, tolerance)
  return "" if value.nil? || value.strip.empty?

  value = value.gsub(",", ".") # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É

  unit = value[/[a-zA-Z]+/] # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
  number = value[/\d+(\.\d+)?/] # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ
  dnp = value.include?("DNP") ? " DNP" : ""

  unit = UNIT_MAP[unit] || unit # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ

  formatted_value = number ? "#{number} #{unit}" : value
  formatted_value += "¬±#{tolerance}" unless tolerance.nil? || tolerance.empty?

  formatted_value.gsub(".", ",") + dnp
end

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
def format_numbers(numbers)
  return numbers.first if numbers.size == 1

  sorted_numbers = numbers.sort_by { |num| num[/\d+/].to_i rescue num }
  ranges = []
  temp_range = [sorted_numbers.first]

  sorted_numbers.each_cons(2) do |prev, curr|
    prev_num = prev[/\d+/].to_i rescue prev
    curr_num = curr[/\d+/].to_i rescue curr

    if curr_num == prev_num + 1
      temp_range << curr
    else
      ranges << (temp_range.size > 2 ? "#{temp_range.first}-#{temp_range.last}" : temp_range.join(","))
      temp_range = [curr]
    end
  end

  ranges << (temp_range.size > 2 ? "#{temp_range.first}-#{temp_range.last}" : temp_range.join(",")) unless temp_range.empty?
  ranges.join(", ")
end

# –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel
xlsx = RubyXL::Parser.parse(xlsx_path)
sheet = xlsx[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

# –ß–∏—Ç–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
data = []
last_value = nil
count = 1
current_numbers = []
last_category = nil  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
sheet.each_with_index do |row, index|
  next if index == 0  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)

  current_value = row[1]&.value.to_s.strip # 2-—è –∫–æ–ª–æ–Ω–∫–∞
  current_number = row[0]&.value.to_s.strip # 1-—è –∫–æ–ª–æ–Ω–∫–∞

  next if current_value.empty?

  description = "#{row[4]&.value.to_s.strip} #{row[5]&.value.to_s.strip}"
  characteristics = parse_characteristics(row[2]&.value.to_s.strip, row[6]&.value.to_s.strip)

  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  component_type = current_number[0]  # –ü–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –≤ –Ω–æ–º–µ—Ä–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞

  # –ï—Å–ª–∏ —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –Ω–æ–≤—ã–π (–∏–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ), –≤—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É-–∑–∞–≥–æ–ª–æ–≤–æ–∫
  if component_type != last_category && CATEGORY_MAP.key?(component_type)
    category_name = CATEGORY_MAP[component_type]
    data << [
      "",            # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
      category_name, # –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      "",            # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
      ""             # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
    ]
  end

  if current_value == last_value
    count += 1
    current_numbers << current_number
    data.last[2] = count.to_s
  else
    data.last[0] = format_numbers(current_numbers) unless current_numbers.empty?
    count = 1
    current_numbers = [current_number]
    data << [
      current_number,
      description,   # –û–ø–∏—Å–∞–Ω–∏–µ
      "1",           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      characteristics # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    ]
  end

  last_value = current_value
  last_category = component_type  # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
end

data.last[0] = format_numbers(current_numbers) unless current_numbers.empty?

# –†–∞–±–æ—Ç–∞ —Å Word
FileUtils.cp(docx_path, new_docx_path)
Zip::File.open(new_docx_path) do |zip|
  document_xml = zip.find_entry("word/document.xml")

  if document_xml
    xml_content = document_xml.get_input_stream.read
    doc = Nokogiri::XML(xml_content)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π XML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    File.write("before_edit.xml", doc.to_xml)

    # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—ã
    tables = doc.xpath("//w:tbl", "w" => "http://schemas.openxmlformats.org/wordprocessingml/2006/main")

    puts "üîπ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: #{tables.size}"
    
    tables.each do |table|
      last_row = table.xpath(".//w:tr").last # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞
      puts "üîπ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: #{table.xpath('.//w:tr').size}"

      data.each do |row_data|
        new_row = Nokogiri::XML::Node.new("w:tr", doc) # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É
      
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏ 0,8 —Å–º
        row_properties = Nokogiri::XML::Node.new("w:trPr", doc)
        row_height = Nokogiri::XML::Node.new("w:trHeight", doc)
        row_height['w:val'] = "453"  # 0.8 —Å–º (800 twips)
        row_height['w:hRule'] = "exact" # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞
        row_properties.add_child(row_height)
        new_row.add_child(row_properties)
      
        row_data.each_with_index do |value, index|
          cell = Nokogiri::XML::Node.new("w:tc", doc) # –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É
          cell_properties = Nokogiri::XML::Node.new("w:tcPr", doc) # –°–≤–æ–π—Å—Ç–≤–∞ —è—á–µ–π–∫–∏
      
          # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
          borders = Nokogiri::XML::Node.new("w:tcBorders", doc)
      
          # –í–µ—Ä—Ö–Ω—è—è –∏ –Ω–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫
          top_border = Nokogiri::XML::Node.new("w:top", doc)
          top_border['w:val'] = "single"
          top_border['w:space'] = "0"
          top_border['w:size'] = "4"  # –¢–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–∏
          top_border['w:space'] = "0"
      
          bottom_border = Nokogiri::XML::Node.new("w:bottom", doc)
          bottom_border['w:val'] = "single"
          bottom_border['w:space'] = "0"
          bottom_border['w:size'] = "4"
      
          borders.add_child(top_border)
          borders.add_child(bottom_border)
      
          # –î–ª—è –ø–µ—Ä–≤–æ–π –∏ —á–µ—Ç–≤–µ—Ä—Ç–æ–π –∫–æ–ª–æ–Ω–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª–µ–≤—É—é –∏ –ø—Ä–∞–≤—É—é –≥—Ä–∞–Ω–∏—Ü—É
          if index == 0 || index == 3
            left_border = Nokogiri::XML::Node.new("w:left", doc)
            left_border['w:val'] = "single"
            left_border['w:space'] = "0"
            left_border['w:size'] = "4"
      
            right_border = Nokogiri::XML::Node.new("w:right", doc)
            right_border['w:val'] = "single"
            right_border['w:space'] = "0"
            right_border['w:size'] = "4"
      
            borders.add_child(left_border)
            borders.add_child(right_border)
          end
      
          # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –∫ —è—á–µ–π–∫–µ
          cell_properties.add_child(borders)
          cell.add_child(cell_properties)
      
          # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —è—á–µ–π–∫–∏
          paragraph = Nokogiri::XML::Node.new("w:p", doc) # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–≥—Ä–∞—Ñ
          run = Nokogiri::XML::Node.new("w:r", doc) # –°–æ–∑–¥–∞–µ–º run (–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–∞)
          text_node = Nokogiri::XML::Node.new("w:t", doc) # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
      
          text_node.content = value.empty? ? "" : value
      
          # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª—è —à—Ä–∏—Ñ—Ç–∞ GOST type A, —Ä–∞–∑–º–µ—Ä 14, –∫—É—Ä—Å–∏–≤
          run_properties = Nokogiri::XML::Node.new("w:rPr", doc)
          font = Nokogiri::XML::Node.new("w:rFonts", doc)
          font['w:ascii'] = "GOST Type A"
          font['w:hAnsi'] = "GOST Type A"
          font['w:eastAsia'] = "GOST Type A"
          font['w:cs'] = "GOST Type A"
          run_properties.add_child(font)
      
          size = Nokogiri::XML::Node.new("w:sz", doc)
          size['w:val'] = "28"  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ 14 (–≤ –ø–æ–ª–æ–≤–∏–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–∞—Ö)
          run_properties.add_child(size)
      
          italic = Nokogiri::XML::Node.new("w:i", doc) # –ö—É—Ä—Å–∏–≤
          run_properties.add_child(italic)
      
          run.add_child(run_properties)
          run.add_child(text_node)
          paragraph.add_child(run)
          cell.add_child(paragraph)
      
          new_row.add_child(cell)
        end
      
        puts "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: #{row_data.inspect}" # –õ–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
        table.add_child(new_row) # –í—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü—É
      end
            
    end
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π XML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    File.write("after_edit.xml", doc.to_xml)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ docx
    zip.get_output_stream("word/document.xml") { |f| f.write(doc.to_xml) }
  end
end

puts "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ shablon_pr_updated.docx"
