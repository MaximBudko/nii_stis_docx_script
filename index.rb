require 'rubyXL'
require 'zip'
require 'nokogiri'
require 'fileutils'
require 'pp'
require 'stringio'

module ExcelToDocx
  # –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
  UNIT_CATEGORY = {
    "p" => "–ø",
    "n" => "–Ω",
    "u" => "–º–∫",
    "m" => "–º",
    "k" => "–∫",
    "M" => "–ú"
  }

  # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
  CATEGORY_MAP = {
    "C" => 	["–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä", "–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã"],
    "D" => 	["–ú–∏–∫—Ä–æ—Å—Ö–µ–º–∞", "–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã"],
    "DA" => ["–ú–∏–∫—Ä–æ—Å—Ö–µ–º–∞ –∞–Ω–∞–ª–æ–≥–æ–≤–∞—è",	"–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã –∞–Ω–∞–ª–æ–≥–æ–≤—ã–µ"],
    "E" =>	["–≠–ª–µ–º–µ–Ω—Ç", "–≠–ª–µ–º–µ–Ω—Ç—ã"],
    "F" =>	["–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å", "–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏"],
    "G" => 	["–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä", "–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã"],
    "GB" =>	["–ë–∞—Ç–∞—Ä–µ—è –ª–∏—Ç–∏–µ–≤–∞—è", "–ë–∞—Ç–∞—Ä–µ–∏ –ª–∏—Ç–∏–µ–≤—ã–µ"],
    "H" =>	["–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä", "–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"],
    "X" => 	["–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å", "–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª–∏"],
    "K" =>	["–†–µ–ª–µ", "–†–µ–ª–µ"],
    "L" => 	["–î—Ä–æ—Å—Å–µ–ª—å", "–î—Ä–æ—Å—Å–µ–ª–∏"],
    "R" => 	["–†–µ–∑–∏—Å—Ç–æ—Ä", "–†–µ–∑–∏—Å—Ç–æ—Ä—ã"],
    "S" =>	["–ö–Ω–æ–ø–∫–∞ —Ç–∞–∫—Ç–æ–≤–∞—è", "–ö–Ω–æ–ø–∫–∏ —Ç–∞–∫—Ç–æ–≤—ã–µ"],
    "T" => 	["–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä", "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä—ã"],
    "U" => 	["–ú–æ–¥—É–ª—å", "–ú–æ–¥—É–ª–∏"],
    "VD" =>	["–î–∏–æ–¥", "–î–∏–æ–¥—ã"],
    "VT" =>	["–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä", "–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã"],
    "P" =>	["–†–µ–ª–µ", "–†–µ–ª–µ"],
    "FA" =>	["–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å", "–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏"],
    "Z" =>	["–ö–≤–∞—Ä—Ü–µ–≤—ã–π —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä", "–ö–≤–∞—Ä—Ü–µ–≤—ã–µ —Ä–µ–∑–æ–Ω–∞—Ç–æ—Ä—ã"]
  }

  ALIAS = {
    "J" => "X",
    "HL" => "H",
    "SB" => "S"
  }

  def self.parse_characteristics(value, tolerance, current_number)
    regxp_current_number = current_number[/\A[a-zA-Z]+/]
    value = value.gsub(",", ".") # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É
    unit_second = ""
    if regxp_current_number == "C"
      unit_second = "–§"
    elsif regxp_current_number == "D" 
      unit_second = ""
    elsif regxp_current_number == "DA"
      unit_second = ""
    elsif regxp_current_number == "E"
      unit_second = ""
    elsif regxp_current_number == "F"
      unit_second = ""
    elsif regxp_current_number == "G"
      unit_second = ""
    elsif regxp_current_number == "GB"
      unit_second = ""
    elsif regxp_current_number == "H"
      unit_second = ""
    elsif regxp_current_number == "X"
      unit_second = ""
    elsif regxp_current_number == "K"
      unit_second = ""
    elsif regxp_current_number == "L"
      unit_second = "–ì–Ω"
    elsif regxp_current_number == "R"
      unit_second = "–û–º"
    elsif regxp_current_number == "S"
      unit_second = ""
    elsif regxp_current_number == "T"
      unit_second = ""
    elsif regxp_current_number == "U"
      unit_second = ""
    elsif regxp_current_number == "VD"
      unit_second = ""
    elsif regxp_current_number == "VT"
      unit_second = ""
    elsif regxp_current_number == "P"
      unit_second = ""
    elsif regxp_current_number == "FA"
      unit_second = ""
    elsif regxp_current_number == "Z"
      unit_second = ""
    end

    unit_first = value[/[a-zA-Z]+/] # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
    number = value[/\d+(\.\d+)?/] # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ
    dnp = value.include?("DNP") ? " DNP" : ""

    unit = UNIT_CATEGORY[unit_first] || ""
    if regxp_current_number == "DA" || regxp_current_number == "F" || regxp_current_number == "D" ||
      regxp_current_number == "G" || regxp_current_number == "K" || regxp_current_number == "HL" ||
      regxp_current_number == "SB" || regxp_current_number == "U" || regxp_current_number == "VD"||
      regxp_current_number == "VT" || regxp_current_number == "X"

      return "#{value.include?("DNP") ? " DNP" : ""}"
    end
    if UNIT_CATEGORY.include?(unit_first) == false
      if value.match?(/^[\d[:punct:]\s]+$/) == true || value.match?(/^[\d[:punct:]\s]+_DNP$/) == true 
        formatted_value = "#{number == " " ? "0" : number } #{unit}#{unit_second}"
        formatted_value += "¬±#{tolerance}" unless tolerance.nil? || tolerance.empty?
        return formatted_value.gsub(".", ",") + dnp
      else
        return "#{value.include?("DNP") ? " DNP" : ""}"
      end
    end

    formatted_value = "#{number == " " ? "0" : number } #{unit}#{unit_second}"
    formatted_value += "¬±#{tolerance}" unless tolerance.nil? || tolerance.empty?

    formatted_value.gsub(".", ",") + dnp
  end

  def self.format_numbers(numbers)
    return numbers.first if numbers.size == 1
    sorted_numbers = numbers.sort_by { |num| num[/\d+/].to_i rescue num }
    ranges = []
    temp_range = [sorted_numbers.first]

    sorted_numbers.each_cons(2) do |prev, curr|
      prev_num = prev[/\d+/].to_i rescue prev
      curr_num = curr[/\d+/].to_i rescue curr

      if curr_num == prev_num + 1
        temp_range << curr
      else
        ranges << (temp_range.size > 2 ? "#{temp_range.first}-#{temp_range.last}" : temp_range.join(", "))
        temp_range = [curr]
      end
    end

    ranges << (temp_range.size > 2 ? "#{temp_range.first}-#{temp_range.last}" : temp_range.join(", ")) unless temp_range.empty?
    ranges.join(", ")
  end

  def self.process_array(data)
    processed_data = []

    data.each do |row|
      if row[0].scan(/\S/).length > 7
        parts = row[0].rpartition(/[-,]/) # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É '-' –∏–ª–∏ ','
        if parts[1] != ""
          processed_data << [parts[0] + parts[1], row[1], "", ""]
          processed_data << [parts[2], "", row[2], row[3]]
        else
          processed_data << row # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        end
      else
        processed_data << row
      end
    end

    processed_data
  end

  def self.group_by_category(data)
    grouped_data = {}
    category_replacements = {}
  
    # 1Ô∏è‚É£ –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è
    data.each do |row|
      category_key = row[0].to_s[/\A[a-zA-Z]+/] || ''
  
      # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–º–µ–Ω–∞ –≤ ALIAS
      if ALIAS.key?(category_key)
        new_key = ALIAS[category_key]
  
        # –ï—Å–ª–∏ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Ç—É–¥–∞
        if grouped_data.key?(new_key)
          grouped_data[new_key] += grouped_data.delete(category_key) if grouped_data.key?(category_key)
        end
  
        category_replacements[category_key] = new_key
        category_key = new_key
      end
  
      category_name = CATEGORY_MAP[category_key] || category_key
      grouped_data[category_name] ||= [] # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      grouped_data[category_name] << row
    end
  
    # 2Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    ordered_categories = data.map { |row| row[0].to_s[/\A[a-zA-Z]+/] || '' }
                             .uniq
                             .map { |key| CATEGORY_MAP[key] || key }
  
    result = []
    ordered_categories.each do |category|
      next unless grouped_data.key?(category) # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  
      items = grouped_data[category]
      next if items.empty? # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –±–µ–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
  
      selected_key = category.length > 1 ? category[1] : category[0]
  
      result << ["", "", "", ""] unless result.empty? || result.last == ["", "", "", ""]
      result << ["", selected_key, "", ""]
      result.concat(items)
    end
  
    # üî• –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ –∫–æ–Ω—Ü–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    result.pop while result.any? && result.last == ["", "", "", ""]
  
    result
  end
  
  def self.move_first_to_end(arr)
    empty_row = ["", "", "", ""]
    arr.insert(0, empty_row.dup)
    arr.push(arr.shift)
  end

  def self.insert_empty_and_move(data)
    empty_row = ["", "", "", ""]
    index = 24 # —Ç–∞–∫ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0, 24-–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å 23
    index_for_move = 23

    while index < data.length

      if data[index] == empty_row

      elsif data[index - 1][1] != "" && data[index - 1][2] == "" && data[index - 1][3] == ""
        data.insert(index - 1, empty_row.dup)
        data.insert(index, empty_row.dup)
      else
        data.insert(index, empty_row.dup) # –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
      end
      index += 30 # —Å–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ 29 –ø–æ–∑–∏—Ü–∏–π (—É—á–∏x—Ç—ã–≤–∞—è –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç)
    end
    
    data
  end

  def self.sort_by_groups(array)
    grouped = array.group_by { |item| item[:number][/^[A-Za-z]+/] }
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —á–∏—Å–ª–æ–≤–æ–π —á–∞—Å—Ç–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π –≥—Ä—É–ø–ø—ã
    sorted = grouped.transform_values do |group|
      group.sort_by { |item| item[:number][/\d+/].to_i }
    end
  
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –≥—Ä—É–ø–ø –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    array.map { |item| sorted[item[:number][/^[A-Za-z]+/]].shift }
  end

  def self.generate_docx(docx_path, xlsx_path, field_values, new_file_path)
    xlsx = RubyXL::Parser.parse(xlsx_path)
    sheet = xlsx[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
    values = field_values
    data = []
    last_value = nil
    last_qnt = nil
    count = 1
    current_numbers = []
    last_category = nil 
    intermediate_data = []

    sheet.each_with_index do |row, index|
      next if index == 0  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)

      current_value = row[1]&.value.to_s.strip # 2-—è –∫–æ–ª–æ–Ω–∫–∞
      current_number = row[0]&.value.to_s.strip # 1-—è –∫–æ–ª–æ–Ω–∫–∞
      current_qnt = row[2]&.value.to_s.strip # 3-—è –∫–æ–ª–æ–Ω–∫–∞
      next if current_value.empty?

      description = "#{row[4]&.value.to_s.strip} #{row[5]&.value.to_s.strip}"
      characteristics = parse_characteristics(row[2]&.value.to_s.strip, row[6]&.value.to_s.strip, current_number)
      intermediate_data << {
        number: current_number,
        value: current_value,
        qnt: current_qnt,
        description: description,
        characteristics: characteristics
      }
    end
    intermediate = sort_by_groups(intermediate_data)
    intermediate.each do |entry|
      if entry[:value] == last_value && entry[:qnt] == last_qnt
        count += 1
        current_numbers << entry[:number]
        data.last[2] = count.to_s
      else
        data.last[0] = format_numbers(current_numbers) unless current_numbers.empty?
        count = 1
        current_numbers = [entry[:number]]
        data << [
          entry[:number],
          entry[:description],
          "1",  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
          entry[:characteristics]
        ]
      end
      last_qnt = entry[:qnt]
      last_value = entry[:value]
    end

    data.last[0] = format_numbers(current_numbers) unless current_numbers.empty?
    data1 = group_by_category(data)
    data2 = process_array(data1)
    data3 = move_first_to_end(data2)
    data5 = insert_empty_and_move(data3)
    new_docx_path = new_file_path + ".docx"
    
    begin
      FileUtils.cp(docx_path, new_docx_path)
    rescue Errno::EACCES => e
      puts "Permission denied while copying the file: #{e.message}"
      return
    end

    Zip::File.open(new_docx_path) do |zip|

      zip.glob('word/{header,footer}*.xml').each do |entry|
        xml_content = entry.get_input_stream.read
        doc = Nokogiri::XML(xml_content)
        namespaces = { 'w' => 'http://schemas.openxmlformats.org/wordprocessingml/2006/main' }

        doc.xpath('//w:t', namespaces).each do |node|
          text = node.text.strip
          if text.empty?
            node.content = ""
            parent_run = node.ancestors('w:r').first
          else
            values.each do |key, value|
              if text.include?(key)
                node.content = value
              end
            end
          end
        end
        zip.get_output_stream(entry.name) { |f| f.write(doc.to_xml) }
      end

      document_xml = zip.find_entry("word/document.xml")

      if document_xml
        xml_content = document_xml.get_input_stream.read
        doc = Nokogiri::XML(xml_content)
        tables = doc.xpath("//w:tbl", "w" => "http://schemas.openxmlformats.org/wordprocessingml/2006/main")

        tables.each do |table|

          data5.each do |row_data|  
            new_row = Nokogiri::XML::Node.new("w:tr", doc)
            row_properties = Nokogiri::XML::Node.new("w:trPr", doc)
            row_height = Nokogiri::XML::Node.new("w:trHeight", doc)
            row_height['w:val'] = "453"
            row_height['w:hRule'] = "exact"
            row_properties.add_child(row_height)
            new_row.add_child(row_properties)
            
            formatted_cells = []
            row_data.each_with_index do |value, index|
              cell = Nokogiri::XML::Node.new("w:tc", doc)
              cell_properties = Nokogiri::XML::Node.new("w:tcPr", doc)
              

              borders = Nokogiri::XML::Node.new("w:tcBorders", doc)
              ["w:top", "w:bottom", "w:left", "w:right"].each do |side|
                border = Nokogiri::XML::Node.new(side, doc)
                border['w:val'] = "single"  # –°–ø–ª–æ—à–Ω–∞—è –ª–∏–Ω–∏—è
                border['w:sz'] = "10"        # –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
                border['w:color'] = "000000" # –ß–µ—Ä–Ω—ã–π —Ü–≤–µ—Ç
                borders.add_child(border)
              end
              cell_properties.add_child(borders)

              v_align = Nokogiri::XML::Node.new("w:vAlign", doc)
              v_align['w:val'] = 'center'  
              cell_properties.add_child(v_align)

              paragraph = Nokogiri::XML::Node.new("w:p", doc)
              paragraph_properties = Nokogiri::XML::Node.new("w:pPr", doc)
              paragraph.add_child(paragraph_properties)
              run = Nokogiri::XML::Node.new("w:r", doc)
              text_node = Nokogiri::XML::Node.new("w:t", doc)
              text_node.content = value

              run_properties = Nokogiri::XML::Node.new("w:rPr", doc)
              font = Nokogiri::XML::Node.new("w:rFonts", doc)
              font['w:ascii'] = "GOST Type A"
              font['w:hAnsi'] = "GOST Type A"
              font['w:eastAsia'] = "GOST Type A"
              font['w:cs'] = "GOST Type A"
              run_properties.add_child(font)

              size = Nokogiri::XML::Node.new("w:sz", doc)
              size['w:val'] = "28"
              run_properties.add_child(size)

              italic = Nokogiri::XML::Node.new("w:i", doc)
              run_properties.add_child(italic)

              run.add_child(run_properties)
              run.add_child(text_node)
              paragraph.add_child(run)
              cell.add_child(paragraph)
              cell.add_child(cell_properties)
              new_row.add_child(cell)
              formatted_cells << cell
            end

            table.add_child(new_row)
          end
        end
       zip.get_output_stream("word/document.xml") { |f| f.write(doc.to_xml) }
      end
    end
  rescue Errno::EACCES => e
    puts "Permission denied while processing the file: #{e.message}"
  end

end

