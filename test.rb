require 'rubyXL'
require 'zip'
require 'nokogiri'
require 'fileutils'
require 'pp'

# –°–ª–æ–≤–∞—Ä—å –∑–∞–º–µ–Ω –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
UNIT_MAP = {
  'n' => '–Ω–§',
  'u' => '–º–∫–§',
  'm' => '–ú–û–º',
  'k' => '–∫–û–º',
  'p' => '–ø–§'
}

# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π —Ç–∏–ø–æ–≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
CATEGORY_MAP = {
  'G' => '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã',
  'C' => '–ö–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä—ã',
  'D' => '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã',
  'DA' => '–ú–∏–∫—Ä–æ—Å—Ö–µ–º—ã –∞–Ω–∞–ª–æ–≥–æ–≤—ã–µ',
  'F' => '–ü—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª–∏',
  'HL' => '–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã',
  'K' => '–†–µ–ª–µ',
  'L' => '–î—Ä–æ—Åc–ª–∏',
  'R' => '–†–µ–∑–∏—Å—Ç–æ—Ä—ã',
  'SB' => '–ö–Ω–æ–ø–∫–∏ —Ç–∞–∫—Ç–æ–≤—ã–µ',
  'U' => '–ú–æ–¥—É–ª–∏',
  'VD' => '–î–∏–æ–¥—ã',
  'VT' => '–¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã',
  'X' => '–°–æ–µ–¥–∏–Ω–∏—Ç–µ–ª–∏'
}

# –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
docx_path = "shablon_pr.docx"
new_docx_path = "shablon_pr_updated.docx"
xlsx_path = "Test.xlsx"

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
def parse_characteristics(value, tolerance)
  return "" if value.nil? || value.strip.empty?

  value = value.gsub(",", ".") # –ó–∞–º–µ–Ω—è–µ–º –∑–∞–ø—è—Ç—É—é –Ω–∞ —Ç–æ—á–∫—É

  unit = value[/[a-zA-Z]+/] # –ò–∑–≤–ª–µ–∫–∞–µ–º –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è
  number = value[/\d+(\.\d+)?/] # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ
  dnp = value.include?("DNP") ? " DNP" : ""

  unit = UNIT_MAP[unit] || unit # –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ä—É—Å—Å–∫–æ–µ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ

  formatted_value = number ? "#{number} #{unit}" : value
  formatted_value += "¬±#{tolerance}" unless tolerance.nil? || tolerance.empty?

  formatted_value.gsub(".", ",") + dnp
end

# –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–º–µ—Ä–æ–≤
def format_numbers(numbers)
  return numbers.first if numbers.size == 1

  sorted_numbers = numbers.sort_by { |num| num[/\d+/].to_i rescue num }
  ranges = []
  temp_range = [sorted_numbers.first]

  sorted_numbers.each_cons(2) do |prev, curr|
    prev_num = prev[/\d+/].to_i rescue prev
    curr_num = curr[/\d+/].to_i rescue curr

    if curr_num == prev_num + 1
      temp_range << curr
    else
      ranges << (temp_range.size > 2 ? "#{temp_range.first}-#{temp_range.last}" : temp_range.join(","))
      temp_range = [curr]
    end
  end

  ranges << (temp_range.size > 2 ? "#{temp_range.first}-#{temp_range.last}" : temp_range.join(",")) unless temp_range.empty?
  ranges.join(", ")
end

# –û—Ç–∫—Ä—ã–≤–∞–µ–º Excel
xlsx = RubyXL::Parser.parse(xlsx_path)
sheet = xlsx[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç

# –ß–∏—Ç–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
# –ß–∏—Ç–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel
data = []
last_value = nil
count = 1
current_numbers = []
last_category = nil  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

# –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
sheet.each_with_index do |row, index|
  next if index == 0  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É (–∑–∞–≥–æ–ª–æ–≤–∫–∏)

  current_value = row[1]&.value.to_s.strip # 2-—è –∫–æ–ª–æ–Ω–∫–∞
  current_number = row[0]&.value.to_s.strip # 1-—è –∫–æ–ª–æ–Ω–∫–∞

  next if current_value.empty?

  description = "#{row[4]&.value.to_s.strip} #{row[5]&.value.to_s.strip}"
  characteristics = parse_characteristics(row[2]&.value.to_s.strip, row[6]&.value.to_s.strip)

  # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –ø–æ –ø–µ—Ä–≤—ã–º —Å–∏–º–≤–æ–ª–∞–º –Ω–æ–º–µ—Ä–∞
  component_type = CATEGORY_MAP.keys.find { |key| current_number.start_with?(key) }  # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –ø–æ –Ω–∞—á–∞–ª—å–Ω–æ–π —á–∞—Å—Ç–∏ —Å—Ç—Ä–æ–∫–∏

  # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–æ –∂–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—É—â–∏–º –¥–∞–Ω–Ω—ã–º
  if current_value == last_value
    count += 1
    current_numbers << current_number
    data.last[2] = count.to_s
  else
    data.last[0] = format_numbers(current_numbers) unless current_numbers.empty?
    count = 1
    current_numbers = [current_number]
    data << [
      current_number,
      description,   # –û–ø–∏—Å–∞–Ω–∏–µ
      "1",           # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ
      characteristics # –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    ]
  end

  last_value = current_value
end

data.last[0] = format_numbers(current_numbers) unless current_numbers.empty?

def insert_empty_rows(data)
  empty_row = ["", "", "", ""]
  index = 24 # —Ç–∞–∫ –∫–∞–∫ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Å 0, 24-–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –∏–Ω–¥–µ–∫—Å 23
  
  while index < data.length
    data.insert(index, empty_row.dup) # –≤—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–ø–∏—é –ø—É—Å—Ç–æ–≥–æ –º–∞—Å—Å–∏–≤–∞
    index += 30 # —Å–¥–≤–∏–≥–∞–µ–º –∏–Ω–¥–µ–∫—Å –Ω–∞ 29 –ø–æ–∑–∏—Ü–∏–π (—É—á–∏—Ç—ã–≤–∞—è –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç)
  end
  
  data
end


#data.each { |sub_array| puts sub_array.inspect }

def process_array(data)
  processed_data = []

  data.each do |row|
    if row[0].length > 7
      parts = row[0].rpartition(/[-,]/) # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É '-' –∏–ª–∏ ','
      if parts[1] != ""
        processed_data << [parts[0] + parts[1], row[1], "", ""]
        processed_data << [parts[2], "", row[2], row[3]]
      else
        processed_data << row # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–¥–µ–ª–∏—Ç—å, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
      end
    else
      processed_data << row
    end
  end

  processed_data
end

def group_by_category(data)
  grouped_data = Hash.new { |hash, key| hash[key] = [] }

  # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ –ø–µ—Ä–≤–æ–π –±—É–∫–≤–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ (–∫–∞—Ç–µ–≥–æ—Ä–∏—è)
  data.each do |row|
    category_key = row[0][0..1] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 1-2 —Å–∏–º–≤–æ–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "R", "C", "DA")
    category_key = CATEGORY_MAP.keys.include?(category_key) ? category_key : category_key[0] # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –±—É–∫–≤—É
    category_name = CATEGORY_MAP[category_key] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è'
    grouped_data[category_name] << row
  end

  # –§–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
  result = []
  grouped_data.each do |category, items|
    result << ["", "", "", ""]
    result << ["", category, "", ""]
    result.concat(items)
  end

  result
end

def move_first_to_end(arr)
  arr.push(arr.shift)
end

data1 = group_by_category(data)
data2 = process_array(data1)
data3 = move_first_to_end(data2)
data4 = insert_empty_rows(data3)





FileUtils.cp(docx_path, new_docx_path)
Zip::File.open(new_docx_path) do |zip|
  document_xml = zip.find_entry("word/document.xml")

  if document_xml
    xml_content = document_xml.get_input_stream.read
    doc = Nokogiri::XML(xml_content)

    File.write("before_edit.xml", doc.to_xml)

    tables = doc.xpath("//w:tbl", "w" => "http://schemas.openxmlformats.org/wordprocessingml/2006/main")
    puts "üîπ –ù–∞–π–¥–µ–Ω–æ —Ç–∞–±–ª–∏—Ü: #{tables.size}"

    tables.each do |table|
      puts "üîπ –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ: #{table.xpath('.//w:tr').size}"

      data4.each do |row_data|  
        new_row = Nokogiri::XML::Node.new("w:tr", doc)
        row_properties = Nokogiri::XML::Node.new("w:trPr", doc)
        row_height = Nokogiri::XML::Node.new("w:trHeight", doc)
        row_height['w:val'] = "453"
        row_height['w:hRule'] = "exact"
        row_properties.add_child(row_height)
        new_row.add_child(row_properties)
        
        formatted_cells = []
        row_data.each_with_index do |value, index|
          cell = Nokogiri::XML::Node.new("w:tc", doc)
          cell_properties = Nokogiri::XML::Node.new("w:tcPr", doc)
          paragraph = Nokogiri::XML::Node.new("w:p", doc)
          run = Nokogiri::XML::Node.new("w:r", doc)
          text_node = Nokogiri::XML::Node.new("w:t", doc)
          text_node.content = value

          run_properties = Nokogiri::XML::Node.new("w:rPr", doc)
          font = Nokogiri::XML::Node.new("w:rFonts", doc)
          font['w:ascii'] = "GOST Type A"
          font['w:hAnsi'] = "GOST Type A"
          font['w:eastAsia'] = "GOST Type A"
          font['w:cs'] = "GOST Type A"
          run_properties.add_child(font)

          size = Nokogiri::XML::Node.new("w:sz", doc)
          size['w:val'] = "28"
          run_properties.add_child(size)

          italic = Nokogiri::XML::Node.new("w:i", doc)
          run_properties.add_child(italic)

          run.add_child(run_properties)
          run.add_child(text_node)
          paragraph.add_child(run)
          cell.add_child(paragraph)
          cell.add_child(cell_properties)
          new_row.add_child(cell)
          formatted_cells << cell
        end

        table.add_child(new_row)
        puts "‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: #{row_data.inspect}"
      end
    end

    File.write("after_edit.xml", doc.to_xml)
    zip.get_output_stream("word/document.xml") { |f| f.write(doc.to_xml) }
  end
end




puts "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ shablon_pr_updated.docx"